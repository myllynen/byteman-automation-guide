RULE Increment instance count
CLASS org.jboss.byteman.automate.proftest.TestUnit
METHOD <init>(int)
AT EXIT
IF true
DO incrementCounter("instances");
ENDRULE

RULE Record instance lifetime
CLASS org.jboss.byteman.automate.proftest.TestUnit
METHOD <init>(int)
AT EXIT
BIND lifetime = $1
IF true
DO incrementCounter("allLife", lifetime);
ENDRULE

RULE Increment call count of method a
CLASS org.jboss.byteman.automate.proftest.TestUnit
METHOD a
AT ENTRY
IF true
DO incrementCounter("countA");
ENDRULE

RULE Increment call count of method b
CLASS org.jboss.byteman.automate.proftest.TestUnit
METHOD b
AT ENTRY
IF true
DO incrementCounter("countB");
ENDRULE

RULE Increment call count of method c
CLASS org.jboss.byteman.automate.proftest.TestUnit
METHOD c
AT ENTRY
IF true
DO incrementCounter("countC");
ENDRULE

RULE Print statistics
CLASS org.jboss.byteman.automate.proftest.TestUnit
METHOD <init>
AT EXIT
BIND average_lifetime:int = Math.round(Float.valueOf(Integer.toString(readCounter("allLife"))) / readCounter("instances"));
IF readCounter("instances") % 10 == 0
DO trace("ProfTest statistics [BTM] - ");
   trace("" + new java.sql.Timestamp(System.currentTimeMillis()));
   trace(":\n\n");

   traceln("Objects instantiated from TestUnit: " + readCounter("instances"));
   traceln("");

   traceln("Calls to method a: " + readCounter("countA"));
   traceln("Calls to method b: " + readCounter("countB"));
   traceln("Calls to method c: " + readCounter("countC"));
   traceln("");
   traceln("Average lifetime: " + average_lifetime);
   traceln("");
ENDRULE
